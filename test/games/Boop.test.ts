import { describe, it, beforeEach, expect } from "vitest";
import { Boop } from "src/games/Boop";
import { Coord } from "src/utils/Coord";

// =================== TicTacToe ===================

describe("Boop", () => {
  let boop: Boop;

  beforeEach(() => {
    boop = new Boop();
  });

  describe("clone", () => {
    it("should return an exact copy of game", () => {
      expect(boop.clone()).toEqual(boop);
    });
  });

  describe("getValidActions", () => {
    it("should return all valid actions to the empty game", () => {
      expect(boop.getValidActions().length).toBe(36);
    });

    it("should return all valid actions to a game in course", () => {
      boop.setState([
        ["b", "a", "b", "a", "b", "a"],
        [".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
      ]);

      expect(boop.getValidActions().length).toBe(6 * 5);
    });

    it("should return all valid actions to a won game", () => {
      boop.setState(
        [
          ["A", "A", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [8, 8, 8, 8]
      );

      boop.playAction({ piece: { author: 0, type: 1 }, slot: new Coord(0, 2) });

      expect(boop.getValidActions().length).toBe(0);
    });
  });

  // Deve

  describe("playAction", () => {
    it("kitten boops kitten", () => {
      boop.setState(
        [
          [".", ".", ".", ".", ".", "."],
          [".", "b", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [8, 0, 8, 0],
        [1, 0]
      );

      boop.playAction({ piece: { author: 0, type: 0 }, slot: new Coord(1, 0) });

      // ===========================================================================

      let model = new Boop();

      model.setState(
        [
          [".", ".", ".", ".", ".", "."],
          ["a", ".", "b", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [7, 0, 8, 0],
        [0, 1]
      );

      model.getState().turns = boop.getState().turns

      expect(boop).toEqual(model);
    });

    it("kitten boops kitten out of the board (goes to stock)", () => {
      boop.setState(
        [
          [".", ".", ".", ".", ".", "."],
          ["b", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [8, 0, 7, 0],
        [1, 0]
      );

      boop.playAction({ piece: { author: 0, type: 0 }, slot: new Coord(1, 1) });

      // ===========================================================================

      let model = new Boop();

      model.setState(
        [
          [".", ".", ".", ".", ".", "."],
          [" ", "a", " ", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [7, 0, 8, 0],
        [0, 1]
      );

      model.getState().turns = boop.getState().turns

      expect(boop).toEqual(model);
    });

    it("cat boops kitten", () => {
      boop.setState(
        [
          [".", ".", ".", ".", ".", "."],
          ["a", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [7, 0, 8, 1],
        [0, 1] 
      );

      boop.playAction({ piece: { author: 1, type: 1 }, slot: new Coord(1, 1) });

      // ===========================================================================

      let model = new Boop();

      model.setState(
        [
          [".", ".", ".", ".", ".", "."],
          [" ", "B", " ", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [8, 0, 8, 0],
        [1, 0]
      );

      model.getState().turns = boop.getState().turns
      
      expect(boop).toEqual(model);
    });

    it("kitten doesnt boops cat", () => {
      boop.setState(
        [
          [".", ".", ".", ".", ".", "."],
          ["B", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [8, 0, 8, 0],
        [1, 0]
      );

      boop.playAction({ piece: { author: 0, type: 0 }, slot: new Coord(1, 1) });

      // ===========================================================================

      let model = new Boop();

      model.setState(
        [
          [".", ".", ".", ".", ".", "."],
          ["B", "a", " ", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [7, 0, 8, 0],
        [0, 1]
      );

      model.getState().turns = boop.getState().turns

      expect(boop).toEqual(model);
    });

    it("cat boops cat", () => {
      boop.setState(
        [
          [".", ".", ".", ".", ".", "."],
          ["B", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [8, 0, 8, 1],
        [0, 1]
      );

      boop.playAction({ piece: { author: 1, type: 1 }, slot: new Coord(1, 1) });

      // ===========================================================================

      let model = new Boop();

      model.setState(
        [
          [".", ".", ".", ".", ".", "."],
          [".", "B", " ", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [8, 0, 8, 1],
        [1, 0]
      );

      model.getState().turns = boop.getState().turns

      expect(boop).toEqual(model);
    });

    it("3 kittens in a row get promoted", () => {
      boop.setState(
        [
          [".", ".", ".", ".", ".", "."],
          ["a", "a", "a", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [5, 0, 8, 0]
      );

      // ===========================================================================

      let model = new Boop();

      model.setState(
        [
          [".", ".", ".", ".", ".", "."],
          [".", ".", " ", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [5, 3, 8, 0]
      );

      model.getState().turns = boop.getState().turns

      expect(boop).toEqual(model);
    });

    it("2 kittens and 1 cat in a row get promoted", () => {
      boop.setState(
        [
          [".", ".", ".", ".", ".", "."],
          ["a", "A", "a", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [6, 0, 8, 0]
      );

      // ===========================================================================

      let model = new Boop();

      model.setState(
        [
          [".", ".", ".", ".", ".", "."],
          [".", ".", " ", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [6, 3, 8, 0]
      );

      expect(boop).toEqual(model);
    });

    it("3 cats in a row wins the game", () => {
      boop.setState([
        [".", ".", ".", ".", ".", "."],
        ["A", "A", "A", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
      ]);

      expect(boop.isGameOver()).toBeTruthy();
      expect(boop.getWinner()).toBe(0);

      boop.setState([
        [".", ".", ".", ".", ".", "."],
        ["B", "B", "B", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "."],
      ]);

      expect(boop.isGameOver()).toBeTruthy();
      expect(boop.getWinner()).toBe(1);
    });

    it("A can make B win", () => {
      boop.setState(
        [
          [".", ".", ".", ".", ".", "."],
          ["B", "B", ".", "B", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [0, 1, 0, 0]
      );

      boop.playAction({ piece: { author: 0, type: 1 }, slot: new Coord(1, 4) });

      expect(boop.isGameOver()).toBeTruthy();
      expect(boop.getWinner()).toBe(1);
    });

    it("Removes a piece", () => {
      boop.setState(
        [
          [".", ".", ".", ".", ".", "."],
          [".", "A", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [0, 0, 0, 0],
        [1, 0]
      );

      boop.playAction({ piece: null, slot: new Coord(1, 1) });

      // ===========================================================

      let model = new Boop();

      model.setState(
        [
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", "."],
        ],
        [0, 1, 0, 0],
        [0, 1]
      );

      model.getState().turns = boop.getState().turns

      expect(boop).toEqual(model);
    });
  });
});
